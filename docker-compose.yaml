version: '3.8'

services:
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME:-monitoraprecos}
      - POSTGRES_USER=${DB_USER:-monitoraprecos}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-senha_segura}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-monitoraprecos}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network
  
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-senha_segura}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-senha_segura}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network
  
  web:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT:-development}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-insecure-development-key-change-in-production}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:8080,http://localhost}
      - DB_NAME=${DB_NAME:-monitoraprecos}
      - DB_USER=${DB_USER:-monitoraprecos}
      - DB_PASSWORD=${DB_PASSWORD:-senha_segura}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_PASSWORD=${REDIS_PASSWORD:-senha_segura}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
    ports:
      - "8000:8000"  # Expor a porta 8000 diretamente
    networks:
      - backend_network
      - frontend_network
    shm_size: 2gb  # Para Playwright
  
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A monitoraprecos worker --loglevel=info
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT:-development}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-insecure-development-key-change-in-production}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DB_NAME=${DB_NAME:-monitoraprecos}
      - DB_USER=${DB_USER:-monitoraprecos}
      - DB_PASSWORD=${DB_PASSWORD:-senha_segura}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_PASSWORD=${REDIS_PASSWORD:-senha_segura}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
    networks:
      - backend_network
    shm_size: 2gb  # Para Playwright
  
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    command: celery -A monitoraprecos beat --loglevel=info
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - DJANGO_ENVIRONMENT=${DJANGO_ENVIRONMENT:-development}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-insecure-development-key-change-in-production}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DB_NAME=${DB_NAME:-monitoraprecos}
      - DB_USER=${DB_USER:-monitoraprecos}
      - DB_PASSWORD=${DB_PASSWORD:-senha_segura}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_PASSWORD=${REDIS_PASSWORD:-senha_segura}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
    networks:
      - backend_network

  # Frontend (Vue.js)
  frontend:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
    command: sh -c "npm install && npm run dev"
    ports:
      - "8080:8080"
    environment:
      - VITE_API_BASE_URL=http://localhost:8000
    networks:
      - frontend_network

networks:
  backend_network:
    driver: bridge
  frontend_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_files:
  media_files: