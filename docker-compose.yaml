version: '3.8'

services:
  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${DB_NAME:-monitoraprecos}
      - POSTGRES_USER=${DB_USER:-monitoraprecos}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-senha_segura}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-monitoraprecos}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
    networks:
      - backend_network
    # Não expor a porta em produção para maior segurança
    # ports:
    #  - "5432:5432"
  
  redis:
    image: redis:7-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-senha_segura}
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-senha_segura}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    networks:
      - backend_network
    # Não expor a porta em produção
    # ports:
    #  - "6379:6379"
  
  web:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_USER=appuser
        - APP_UID=1000
    restart: unless-stopped
    volumes:
      - static_files:/app/staticfiles
      - media_files:/app/media
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DJANGO_ENVIRONMENT=production
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=False
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost}
      - DB_NAME=${DB_NAME:-monitoraprecos}
      - DB_USER=${DB_USER:-monitoraprecos}
      - DB_PASSWORD=${DB_PASSWORD:-senha_segura}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_PASSWORD=${REDIS_PASSWORD:-senha_segura}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
      - WEB_CONCURRENCY=${WEB_CONCURRENCY:-4}
      - PORT=8000
    networks:
      - backend_network
      - frontend_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    shm_size: 2gb  # Para Playwright
  
  celery:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_USER=celeryuser
        - APP_UID=1001
    command: celery -A monitoraprecos worker --loglevel=info --concurrency=${CELERY_CONCURRENCY:-4} --max-tasks-per-child=1000
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DJANGO_ENVIRONMENT=production
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=False
      - DB_NAME=${DB_NAME:-monitoraprecos}
      - DB_USER=${DB_USER:-monitoraprecos}
      - DB_PASSWORD=${DB_PASSWORD:-senha_segura}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_PASSWORD=${REDIS_PASSWORD:-senha_segura}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
      - CELERY_CONCURRENCY=${CELERY_CONCURRENCY:-4}
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
    shm_size: 2gb  # Para Playwright
  
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - APP_USER=beatuser
        - APP_UID=1002
    command: celery -A monitoraprecos beat --loglevel=info
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - DJANGO_ENVIRONMENT=production
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_DEBUG=False
      - DB_NAME=${DB_NAME:-monitoraprecos}
      - DB_USER=${DB_USER:-monitoraprecos}
      - DB_PASSWORD=${DB_PASSWORD:-senha_segura}
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_PASSWORD=${REDIS_PASSWORD:-senha_segura}
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-senha_segura}@redis:6379/0
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
  
  nginx:
    image: nginx:stable-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d:ro
      - ./nginx/certs:/etc/nginx/certs:ro
      - static_files:/var/www/static:ro
      - media_files:/var/www/media:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M
    networks:
      - frontend_network

  # Opcional: Serviço de backup automático
  backup:
    image: postgres:14-alpine
    depends_on:
      - db
    command: >
      /bin/sh -c "
        mkdir -p /backups &&
        while :; do
          PGPASSWORD=$${DB_PASSWORD} pg_dump -h db -U $${DB_USER} $${DB_NAME} | gzip > /backups/monitoraprecos_$$(date +%Y-%m-%d_%H-%M-%S).sql.gz &&
          find /backups -type f -name '*.sql.gz' -mtime +7 -delete &&
          sleep 86400
        done
      "
    environment:
      - DB_NAME=${DB_NAME:-monitoraprecos}
      - DB_USER=${DB_USER:-monitoraprecos}
      - DB_PASSWORD=${DB_PASSWORD:-senha_segura}
    volumes:
      - backups:/backups
    restart: unless-stopped
    networks:
      - backend_network
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 256M

  # Opcional: Serviço de monitoramento (Prometheus + Grafana)
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - monitoring_network
      - backend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-senha_segura}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - monitoring_network
      - frontend_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

networks:
  backend_network:
    driver: bridge
    internal: true  # Não é acessível do exterior
  frontend_network:
    driver: bridge
  monitoring_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  static_files:
  media_files:
  backups:
  prometheus_data:
  grafana_data: